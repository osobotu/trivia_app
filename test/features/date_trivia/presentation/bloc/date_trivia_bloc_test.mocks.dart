// Mocks generated by Mockito 5.3.2 from annotations
// in number_trivia_app/test/features/date_trivia/presentation/bloc/date_trivia_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:number_trivia_app/core/core.dart' as _i6;
import 'package:number_trivia_app/features/date_trivia/date_trivia.dart' as _i4;
import 'package:number_trivia_app/features/date_trivia/domain/entities/entities.dart'
    as _i7;
import 'package:number_trivia_app/features/date_trivia/domain/repositories/repositories.dart'
    as _i2;
import 'package:number_trivia_app/features/favorite_trivia/favorite_trivia.dart'
    as _i8;
import 'package:number_trivia_app/features/number_trivia/number_trivia.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTriviaRepository_0 extends _i1.SmartFake
    implements _i2.DateTriviaRepository {
  _FakeDateTriviaRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetConcreteDateTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConcreteDateTrivia extends _i1.Mock
    implements _i4.GetConcreteDateTrivia {
  @override
  _i2.DateTriviaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDateTriviaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDateTriviaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DateTriviaRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.DateTrivia>> call(
          _i4.DateParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.DateTrivia>>.value(
            _FakeEither_1<_i6.Failure, _i7.DateTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.DateTrivia>>.value(
                _FakeEither_1<_i6.Failure, _i7.DateTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.DateTrivia>>);
}

/// A class which mocks [GetRandomDateTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomDateTrivia extends _i1.Mock
    implements _i4.GetRandomDateTrivia {
  @override
  _i2.DateTriviaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDateTriviaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeDateTriviaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.DateTriviaRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.DateTrivia>> call(
          _i6.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.DateTrivia>>.value(
            _FakeEither_1<_i6.Failure, _i7.DateTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.DateTrivia>>.value(
                _FakeEither_1<_i6.Failure, _i7.DateTrivia>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.DateTrivia>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i6.InputConverter {
  @override
  _i3.Either<_i6.Failure, int> stringToUnsignedInteger(String? str) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToUnsignedInteger,
          [str],
        ),
        returnValue: _FakeEither_1<_i6.Failure, int>(
          this,
          Invocation.method(
            #stringToUnsignedInteger,
            [str],
          ),
        ),
        returnValueForMissingStub: _FakeEither_1<_i6.Failure, int>(
          this,
          Invocation.method(
            #stringToUnsignedInteger,
            [str],
          ),
        ),
      ) as _i3.Either<_i6.Failure, int>);
  @override
  _i3.Either<_i6.Failure, _i4.DateParams> getMonthAndDayFromDateTime(
          DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMonthAndDayFromDateTime,
          [date],
        ),
        returnValue: _FakeEither_1<_i6.Failure, _i4.DateParams>(
          this,
          Invocation.method(
            #getMonthAndDayFromDateTime,
            [date],
          ),
        ),
        returnValueForMissingStub: _FakeEither_1<_i6.Failure, _i4.DateParams>(
          this,
          Invocation.method(
            #getMonthAndDayFromDateTime,
            [date],
          ),
        ),
      ) as _i3.Either<_i6.Failure, _i4.DateParams>);
  @override
  _i3.Either<_i6.Failure, _i8.FavoriteDateTrivia> triviaToFavoriteDate(
          _i7.DateTrivia? dateTrivia) =>
      (super.noSuchMethod(
        Invocation.method(
          #triviaToFavoriteDate,
          [dateTrivia],
        ),
        returnValue: _FakeEither_1<_i6.Failure, _i8.FavoriteDateTrivia>(
          this,
          Invocation.method(
            #triviaToFavoriteDate,
            [dateTrivia],
          ),
        ),
        returnValueForMissingStub:
            _FakeEither_1<_i6.Failure, _i8.FavoriteDateTrivia>(
          this,
          Invocation.method(
            #triviaToFavoriteDate,
            [dateTrivia],
          ),
        ),
      ) as _i3.Either<_i6.Failure, _i8.FavoriteDateTrivia>);
  @override
  _i3.Either<_i6.Failure, _i8.FavoriteNumberTrivia> triviaToFavoriteNumber(
          _i9.NumberTrivia? numberTrivia) =>
      (super.noSuchMethod(
        Invocation.method(
          #triviaToFavoriteNumber,
          [numberTrivia],
        ),
        returnValue: _FakeEither_1<_i6.Failure, _i8.FavoriteNumberTrivia>(
          this,
          Invocation.method(
            #triviaToFavoriteNumber,
            [numberTrivia],
          ),
        ),
        returnValueForMissingStub:
            _FakeEither_1<_i6.Failure, _i8.FavoriteNumberTrivia>(
          this,
          Invocation.method(
            #triviaToFavoriteNumber,
            [numberTrivia],
          ),
        ),
      ) as _i3.Either<_i6.Failure, _i8.FavoriteNumberTrivia>);
}
